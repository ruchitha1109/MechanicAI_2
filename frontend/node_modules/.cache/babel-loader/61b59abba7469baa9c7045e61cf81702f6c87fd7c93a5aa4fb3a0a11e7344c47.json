{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Project_Blog\\\\MechanicAI_2\\\\frontend\\\\src\\\\components\\\\main\\\\main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './main.css';\nimport { assets } from '../../assets/assets';\nimport botResponses from '../../assets/botResponses.json';\nimport axios from 'axios';\nimport { account } from '../../appwrite'; // Import the account object from Appwrite.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:5000'; // Replace with the backend server URL\n\nconst Main = ({\n  resetChat,\n  onLogout,\n  previousConversation\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [cardMessages, setCardMessages] = useState([]);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [userName, setUserName] = useState('');\n  const inputRef = useRef(null);\n  useEffect(() => {\n    // Only update messages if there is a previous conversation\n    if (previousConversation && previousConversation.length > 0) {\n      setMessages(previousConversation);\n      setIsFirstMessageSent(true); // Indicate that the chat has started\n    }\n  }, [previousConversation]);\n  useEffect(() => {\n    const fetchUserId = async () => {\n      try {\n        const user = await account.get(); // Fetch the logged-in user from Appwrite\n        setUserId((user === null || user === void 0 ? void 0 : user.$id) || null); // Save the userId\n      } catch (error) {\n        console.error('Error fetching user:', error);\n      }\n    };\n    fetchUserId();\n  }, []);\n  const toggleDropdown = () => setIsDropdownOpen(prev => !prev);\n  const getRandomProblemsForCards = () => {\n    const keys = Object.keys(botResponses);\n    const randomProblems = [];\n    while (randomProblems.length < 4) {\n      const randomKey = keys[Math.floor(Math.random() * keys.length)];\n      const randomProblem = botResponses[randomKey];\n      if (!randomProblems.some(problem => problem.title === randomProblem.title)) {\n        randomProblems.push({\n          ...randomProblem,\n          key: randomKey\n        });\n      }\n    }\n    return randomProblems;\n  };\n  const handleSend = async () => {\n    if (!userId) {\n      console.error('User ID is not available');\n      return;\n    }\n    if (input.trim()) {\n      var _inputRef$current;\n      setIsFirstMessageSent(true);\n      const newMessage = {\n        sender: 'user',\n        text: input\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      setInput('');\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      try {\n        let response;\n        if (!sessionId) {\n          // Create a new session for the first message\n          response = await axios.post(`${API_URL}/api/new`, {\n            userId,\n            message: input\n          });\n          console.log('New session created with ID:', response.data.sessionId);\n          setSessionId(response.data.sessionId); // Save the session ID\n        } else {\n          // Use the existing session ID for subsequent messages\n          response = await axios.post(`${API_URL}/api/message`, {\n            userId,\n            sessionId,\n            message: input\n          });\n        }\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: response.data.response\n        }]);\n      } catch (error) {\n        console.error('Error in sending message:', error);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: 'Oops! Something went wrong. Please try again.'\n        }]);\n      }\n    }\n  };\n  const handleCardClick = async messageKey => {\n    const selectedProblem = botResponses[messageKey];\n    const userMessage = selectedProblem.title;\n    setIsFirstMessageSent(true);\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'user',\n      text: userMessage\n    }]);\n    try {\n      let response;\n      if (!sessionId) {\n        // Create a new session when clicking a card\n        response = await axios.post(`${API_URL}/api/new`, {\n          userId,\n          message: userMessage\n        });\n        console.log('New session created with ID:', response.data.sessionId);\n        setSessionId(response.data.sessionId);\n      } else {\n        response = await axios.post(`${API_URL}/api/message`, {\n          userId,\n          sessionId,\n          message: userMessage\n        });\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: response.data.response\n      }]);\n    } catch (error) {\n      console.error('Error in creating chat from card:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'An error occurred. Please try again.'\n      }]);\n    }\n  };\n  const startNewChat = () => {\n    setSessionId(null); // Reset session ID for a new conversation\n    setMessages([]);\n    setIsFirstMessageSent(false);\n  };\n  useEffect(() => {\n    setCardMessages(getRandomProblemsForCards());\n    startNewChat();\n  }, [resetChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Mechanic-AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-section\",\n        onClick: toggleDropdown,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: assets.user_icon,\n          alt: \"User Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), isDropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onLogout,\n            className: \"dropdown-item\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [!isFirstMessageSent ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"greet\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Hello, Dev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"How can I help you today?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: cardMessages.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            onClick: () => handleCardClick(card.key),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: card.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: assets[card.icon],\n              alt: `${card.title} Icon`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-row ${message.sender === \"user\" ? \"user-row\" : \"bot-row\"}`,\n          children: [message.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: assets.gemini_icon,\n            alt: \"Bot Icon\",\n            className: \"message-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender === \"user\" ? \"user-message\" : \"bot-message\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.message || message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-bottom\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter a prompt here\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && handleSend(),\n            ref: inputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: handleSend,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: assets.send_icon,\n              alt: \"Send Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"bottom-info\",\n          children: \"This may display inaccurate info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"YKEGGCcSPgxzag361++YzCjboIY=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","useRef","assets","botResponses","axios","account","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","Main","resetChat","onLogout","previousConversation","_s","input","setInput","messages","setMessages","isFirstMessageSent","setIsFirstMessageSent","cardMessages","setCardMessages","isDropdownOpen","setIsDropdownOpen","sessionId","setSessionId","userId","setUserId","userName","setUserName","inputRef","length","fetchUserId","user","get","$id","error","console","toggleDropdown","prev","getRandomProblemsForCards","keys","Object","randomProblems","randomKey","Math","floor","random","randomProblem","some","problem","title","push","key","handleSend","trim","_inputRef$current","newMessage","sender","text","prevMessages","current","focus","response","post","message","log","data","handleCardClick","messageKey","selectedProblem","userMessage","startNewChat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","user_icon","alt","map","card","index","icon","gemini_icon","type","placeholder","value","onChange","e","target","onKeyPress","ref","send_icon","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Project_Blog/MechanicAI_2/frontend/src/components/main/main.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './main.css';\r\nimport { assets } from '../../assets/assets';\r\nimport botResponses from '../../assets/botResponses.json';\r\nimport axios from 'axios';\r\nimport { account } from '../../appwrite'; // Import the account object from Appwrite.js\r\n\r\nconst API_URL = 'http://localhost:5000'; // Replace with the backend server URL\r\n\r\nconst Main = ({ resetChat, onLogout, previousConversation }) => {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\r\n  const [cardMessages, setCardMessages] = useState([]);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [userId, setUserId] = useState(null);\r\n  const [userName, setUserName] = useState('');\r\n  const inputRef = useRef(null);\r\n\r\n\r\n  useEffect(() => {\r\n    // Only update messages if there is a previous conversation\r\n    if (previousConversation && previousConversation.length > 0) {\r\n      setMessages(previousConversation);\r\n      setIsFirstMessageSent(true); // Indicate that the chat has started\r\n    }\r\n  }, [previousConversation]);\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchUserId = async () => {\r\n      try {\r\n        const user = await account.get(); // Fetch the logged-in user from Appwrite\r\n        setUserId(user?.$id || null); // Save the userId\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching user:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserId();\r\n  }, []);\r\n\r\n  const toggleDropdown = () => setIsDropdownOpen((prev) => !prev);\r\n\r\n  const getRandomProblemsForCards = () => {\r\n    const keys = Object.keys(botResponses);\r\n    const randomProblems = [];\r\n    while (randomProblems.length < 4) {\r\n      const randomKey = keys[Math.floor(Math.random() * keys.length)];\r\n      const randomProblem = botResponses[randomKey];\r\n      if (!randomProblems.some((problem) => problem.title === randomProblem.title)) {\r\n        randomProblems.push({ ...randomProblem, key: randomKey });\r\n      }\r\n    }\r\n    return randomProblems;\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!userId) {\r\n      console.error('User ID is not available');\r\n      return;\r\n    }\r\n\r\n    if (input.trim()) {\r\n      setIsFirstMessageSent(true);\r\n      const newMessage = { sender: 'user', text: input };\r\n      setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      setInput('');\r\n      inputRef.current?.focus();\r\n\r\n      try {\r\n        let response;\r\n        if (!sessionId) {\r\n          // Create a new session for the first message\r\n          response = await axios.post(`${API_URL}/api/new`, { userId, message: input });\r\n          console.log('New session created with ID:', response.data.sessionId);\r\n          setSessionId(response.data.sessionId); // Save the session ID\r\n        } else {\r\n          // Use the existing session ID for subsequent messages\r\n          response = await axios.post(`${API_URL}/api/message`, { userId, sessionId, message: input });\r\n        }\r\n\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: response.data.response },\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error in sending message:', error);\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          { sender: 'bot', text: 'Oops! Something went wrong. Please try again.' },\r\n        ]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCardClick = async (messageKey) => {\r\n    const selectedProblem = botResponses[messageKey];\r\n    const userMessage = selectedProblem.title;\r\n\r\n    setIsFirstMessageSent(true);\r\n    setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: userMessage }]);\r\n\r\n    try {\r\n      let response;\r\n      if (!sessionId) {\r\n        // Create a new session when clicking a card\r\n        response = await axios.post(`${API_URL}/api/new`, { userId, message: userMessage });\r\n        console.log('New session created with ID:', response.data.sessionId);\r\n        setSessionId(response.data.sessionId);\r\n      } else {\r\n        response = await axios.post(`${API_URL}/api/message`, { userId, sessionId, message: userMessage });\r\n      }\r\n\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: response.data.response },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error in creating chat from card:', error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { sender: 'bot', text: 'An error occurred. Please try again.' },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const startNewChat = () => {\r\n    setSessionId(null); // Reset session ID for a new conversation\r\n    setMessages([]);\r\n    setIsFirstMessageSent(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCardMessages(getRandomProblemsForCards());\r\n    startNewChat();\r\n  }, [resetChat]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"nav\">\r\n        <p>Mechanic-AI</p>\r\n        <div className=\"user-section\" onClick={toggleDropdown}>\r\n          <img src={assets.user_icon} alt=\"User Icon\" />\r\n          {isDropdownOpen && (\r\n            <div className=\"dropdown\">\r\n              <button onClick={onLogout} className=\"dropdown-item\">\r\n                Logout\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        {!isFirstMessageSent ? (\r\n          <>\r\n            <div className=\"greet\">\r\n              <p>\r\n                <span>Hello, Dev</span>\r\n              </p>\r\n              <p>How can I help you today?</p>\r\n            </div>\r\n            <div className=\"cards\">\r\n              {cardMessages.map((card, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"card\"\r\n                  onClick={() => handleCardClick(card.key)}\r\n                >\r\n                  <p>{card.title}</p>\r\n                  <img src={assets[card.icon]} alt={`${card.title} Icon`} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"chat-section\">\r\n            {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message-row ${message.sender === \"user\" ? \"user-row\" : \"bot-row\"}`}\r\n          >\r\n            {message.sender === \"bot\" && (\r\n              <img src={assets.gemini_icon} alt=\"Bot Icon\" className=\"message-icon\" />\r\n            )}\r\n            <div\r\n              className={`message ${message.sender === \"user\" ? \"user-message\" : \"bot-message\"}`}\r\n            >\r\n              <p>{message.message || message.text}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"main-bottom\">\r\n          <div className=\"search-box\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter a prompt here\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n              ref={inputRef}\r\n            />\r\n            <div onClick={handleSend}>\r\n              <img src={assets.send_icon} alt=\"Send Icon\" />\r\n            </div>\r\n          </div>\r\n          <p className=\"bottom-info\">This may display inaccurate info</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}